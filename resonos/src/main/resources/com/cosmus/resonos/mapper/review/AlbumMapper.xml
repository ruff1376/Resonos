<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cosmus.resonos.mapper.review.AlbumMapper">

  <resultMap id="Album" type="com.cosmus.resonos.domain.review.Album">
    <id property="id" column="id"/>
    <result property="title" column="title"/>
    <result property="coverImage" column="cover_image"/>
    <result property="releaseDate" column="release_date"/>
    <result property="genre" column="genre"/>
    <result property="label" column="label"/>
    <result property="description" column="description"/>
    <result property="artistId" column="artist_id"/>
    <result property="artistName" column="artist_name"/>
    <result property="likeCount" column="like_count"/>
    <result property="followerCount" column="follower_count"/>
    <result property="popularityScore" column="popularity_score"/>
    <result property="country" column="country"/>
    <result property="reviewCount" column="review_count"/>
    <result property="avgRating" column="avg_rating"/>
  </resultMap>

  <select id="list" resultMap="Album">
    SELECT * FROM album
    ORDER BY release_date DESC
  </select>

  <select id="korHotReviewList" resultMap="Album">
    SELECT a.*, ar.name AS artist_name, COUNT(arw.id) AS review_count, ROUND(AVG(arw_all.rating)) AS avg_rating
    FROM album a
    LEFT JOIN artist ar ON a.artist_id = ar.id
    LEFT JOIN album_review arw
      ON a.id = arw.album_id
      AND DATE(arw.created_at) = DATE_SUB(CURDATE(), INTERVAL 1 DAY)
    LEFT JOIN album_review arw_all
      ON a.id = arw_all.album_id
    WHERE a.country = 'KOR'
    GROUP BY a.id
    ORDER BY review_count DESC
    LIMIT 5
  </select>

  <select id="worldHotReviewList" resultMap="Album">
    SELECT a.*, ar.name AS artist_name, COUNT(arw.id) AS review_count, ROUND(AVG(arw_all.rating)) AS avg_rating
    FROM album a
    JOIN artist ar ON a.artist_id = ar.id
    LEFT JOIN album_review arw
      ON a.id = arw.album_id
      AND DATE(arw.created_at) = DATE_SUB(CURDATE(), INTERVAL 1 DAY)
    LEFT JOIN album_review arw_all
      ON a.id = arw_all.album_id
    WHERE a.country IS NULL OR a.country != 'KOR'
    GROUP BY a.id
    ORDER BY review_count DESC
    LIMIT 5
  </select>

  <select id="mainNewList" resultMap="Album">
    SELECT a.*, ar.name AS artist_name, ROUND(AVG(arw.rating)) AS avg_rating
    FROM album a
    LEFT JOIN artist ar ON a.artist_id = ar.id
    LEFT JOIN album_review arw ON a.id = arw.album_id
    WHERE a.release_date >= DATE_SUB(CURDATE(), INTERVAL 14 DAY)
    GROUP BY a.id
    ORDER BY a.release_date DESC, artist_name
    LIMIT 12
  </select>

  <select id="newList" resultMap="Album">
    SELECT a.*, ar.name AS artist_name, ROUND(AVG(arw.rating)) AS avg_rating
    FROM album a
    LEFT JOIN artist ar ON a.artist_id = ar.id
    LEFT JOIN album_review arw ON a.id = arw.album_id
    WHERE a.release_date >= DATE_SUB(CURDATE(), INTERVAL 14 DAY)
    GROUP BY a.id
    ORDER BY a.release_date DESC, artist_name
    LIMIT #{index}, #{size}
  </select>

  <select id="mainHotList" resultMap="Album">
    SELECT a.*,
          (COUNT(DISTINCT arw.id) * 3 + COUNT(DISTINCT la.id)) AS popularity_score,
          art.name AS artist_name, ROUND(AVG(arw.rating)) AS avg_rating
    FROM album a
    LEFT JOIN artist art ON a.artist_id = art.id
    LEFT JOIN album_review arw ON a.id = arw.album_id
    LEFT JOIN liked_album la ON a.id = la.album_id
    GROUP BY a.id
    HAVING popularity_score >= 25
    ORDER BY popularity_score DESC
    LIMIT 12
  </select>

  <select id="hotList" resultMap="Album">
    SELECT a.*,
          (COUNT(DISTINCT arw.id) * 3 + COUNT(DISTINCT la.id)) AS popularity_score,
          art.name AS artist_name, ROUND(AVG(arw.rating)) AS avg_rating
    FROM album a
    LEFT JOIN artist art ON a.artist_id = art.id
    LEFT JOIN album_review arw ON a.id = arw.album_id
    LEFT JOIN liked_album la ON a.id = la.album_id
    GROUP BY a.id
    HAVING popularity_score >= 25
    ORDER BY popularity_score DESC
    LIMIT #{index}, #{size}
  </select>

  <select id="count" resultType="long">
    SELECT COUNT(*)
    FROM album
  </select>

  <select id="newCount" resultType="long">
    SELECT COUNT(*)
    FROM album
    WHERE release_date >= DATE_SUB(CURDATE(), INTERVAL 14 DAY)
  </select>

  <select id="hotCount" resultType="long">
    SELECT COUNT(*)
    FROM (
      SELECT a.id,
            (COUNT(DISTINCT arw.id) * 3 + COUNT(DISTINCT la.id)) AS popularity_score
      FROM album a
      LEFT JOIN album_review arw ON a.id = arw.album_id
      LEFT JOIN liked_album la ON a.id = la.album_id
      GROUP BY a.id
      HAVING popularity_score >= 25
    ) AS filtered
  </select>

  <select id="select" resultMap="Album">
    SELECT * FROM album WHERE id = #{id}
  </select>

  <insert id="insert">
    INSERT INTO album (id, title, cover_image, release_date, genre, label, description, artist_id)
    VALUES (#{id}, #{title}, #{coverImage}, #{releaseDate}, #{genre}, #{label}, #{description}, #{artistId})
  </insert>

  <update id="update">
    UPDATE album
    SET title = #{title},
        cover_image = #{coverImage},
        release_date = #{releaseDate},
        genre = #{genre},
        label = #{label},
        description = #{description},
        artist_id = #{artistId},
        release_date = #{releaseDate}
    WHERE id = #{id}
  </update>

  <delete id="delete">
    DELETE FROM album WHERE id = #{id}
  </delete>

  <select id="exists" resultType="int" >
    SELECT COUNT(*) FROM album WHERE id = #{id}
  </select>

  <!-- 모든 앨범을 아티스트 ID로 조회 -->
  <!-- id 자료형에 맞게 string·long 등으로 -->
  <select id="findAlbumsByArtistId"

          resultMap="Album">
    SELECT a.*,
          ar.name AS artist_name
    FROM   album  a
    JOIN   artist ar ON a.artist_id = ar.id
    WHERE  a.artist_id = #{artistId}
    ORDER BY a.release_date DESC
  </select>

  <!-- trackId 앨범 객체 -->
  <select id="findAlbumByTrackId"

          resultType="Album">
    SELECT a.*
    FROM   album  a
    JOIN   track  t ON t.album_id = a.id
    WHERE  t.id = #{trackId}
  </select>

  <!-- artistId -->
  <!-- 아티스트의 앨범 수 -->
  <select id="countAlbumsByArtist"

          resultType="int">
      SELECT
          COUNT(*)
      FROM album
      WHERE artist_id = #{artistId}
  </select>

  <select id="searchList" resultMap="Album">
    SELECT a.*, ar.name AS artist_name,
          COUNT(DISTINCT la.id) AS like_count,
          COUNT(DISTINCT af.id) AS follower_count,
          ROUND(AVG(arw.rating)) AS avg_rating
    FROM album a
    LEFT JOIN artist ar ON a.artist_id = ar.id
    LEFT JOIN liked_album la ON a.id = la.album_id
    LEFT JOIN artist_follow af ON ar.id = af.artist_id
    LEFT JOIN album_review arw ON a.id = arw.album_id
    WHERE 1=1
      <if test="keyword != null and keyword != ''">
        AND (a.title LIKE CONCAT('%', #{keyword}, '%') OR ar.name LIKE CONCAT('%', #{keyword}, '%'))
      </if>
    GROUP BY a.id
    ORDER BY
      CASE
        WHEN a.title = #{keyword} THEN 1
        WHEN ar.name = #{keyword} THEN 2
        WHEN a.title LIKE CONCAT(#{keyword}, '%') THEN 3
        WHEN ar.name LIKE CONCAT(#{keyword}, '%') THEN 4
        WHEN a.title LIKE CONCAT('%', #{keyword}, '%') THEN 5
        WHEN ar.name LIKE CONCAT('%', #{keyword}, '%') THEN 6
        ELSE 7
      END,
      like_count DESC,
      follower_count DESC,
      a.title ASC,
      ar.name ASC
    LIMIT 12
  </select>


  <select id="allSearchList" resultMap="Album">
    SELECT a.*, ar.name AS artist_name,
          COUNT(DISTINCT la.id) AS like_count,
          COUNT(DISTINCT af.id) AS follower_count,
          ROUND(AVG(arw.rating)) AS avg_rating,
          (COUNT(DISTINCT arw.id) * 3 + COUNT(DISTINCT la.id)) AS popularity_score
    FROM album a
    LEFT JOIN artist ar ON a.artist_id = ar.id
    LEFT JOIN liked_album la ON a.id = la.album_id
    LEFT JOIN artist_follow af ON ar.id = af.artist_id
    LEFT JOIN album_review arw ON a.id = arw.album_id
    WHERE a.title LIKE CONCAT('%', #{keyword}, '%') OR ar.name LIKE CONCAT('%', #{keyword}, '%')
    GROUP BY a.id
    <choose>
        <when test="sort == 'latest'">
            ORDER BY a.release_date DESC
        </when>
        <when test="sort == 'popular'">
            ORDER BY popularity_score DESC
        </when>
        <otherwise>
            ORDER BY
              CASE
                WHEN a.title = #{keyword} THEN 1
                WHEN ar.name = #{keyword} THEN 2
                WHEN a.title LIKE CONCAT(#{keyword}, '%') THEN 3
                WHEN ar.name LIKE CONCAT(#{keyword}, '%') THEN 4
                WHEN a.title LIKE CONCAT('%', #{keyword}, '%') THEN 5
                WHEN ar.name LIKE CONCAT('%', #{keyword}, '%') THEN 6
                ELSE 7
              END,
              like_count DESC,
              follower_count DESC,
              a.title ASC,
              ar.name ASC
        </otherwise>
    </choose>
    LIMIT #{pagination.index}, #{pagination.size}
  </select>

  <select id="searchCount" resultType="long">
    SELECT COUNT(DISTINCT a.id)
    FROM album a
    LEFT JOIN artist ar ON a.artist_id = ar.id
    WHERE a.title LIKE CONCAT('%', #{keyword}, '%') OR ar.name LIKE CONCAT('%', #{keyword}, '%')
  </select>

  <!-- 마이페이지: 좋아요 표시한 앨범 3개 -->
  <select id="likedAlbumsTop3" resultType="Album">
    SELECT a.*, la.created_at
    FROM liked_album la
      INNER JOIN album a ON la.album_id = a.id
    WHERE la.user_id = #{id}
    ORDER BY la.created_at DESC
    LIMIT 3
  </select>

  <!-- 마이페이지: 좋아요 표시한 앨범 전체 -->
  <select id="likedAlbums" resultType="Album">
    SELECT a.*, la.created_at, art.name AS artistName
    FROM liked_album la
      INNER JOIN album a ON la.album_id = a.id
      INNER JOIN artist art ON a.artist_id = art.id
    WHERE la.user_id = #{id}
    <if test="keyword != null and keyword != ''">
      AND(
        a.title LIKE CONCAT('%', #{keyword}, '%')
        OR art.name LIKE CONCAT('%', #{keyword}, '%')
      )
    </if>
    ORDER BY
    <choose>
      <when test="keyword != null and keyword != ''">
        CASE
          WHEN a.title LIKE CONCAT(#{keyword}, '%') THEN 0
          WHEN a.title LIKE CONCAT('%', #{keyword}, '%') THEN 1
          WHEN art.name LIKE CONCAT(#{keyword}, '%') THEN 2
          WHEN art.name LIKE CONCAT('%', #{keyword}, '%') THEN 3
          ELSE 4
        END,
        la.created_at DESC
      </when>
      <otherwise>
        la.created_at DESC
      </otherwise>
    </choose>
    LIMIT #{offset}, #{limit}
  </select>

  <!-- 마이페이지: 좋아요 표시한 앨범 수 -->
  <select id="countLikedAlbums" resultType="int">
    SELECT COUNT(*)
    FROM liked_album la
    WHERE la.user_id = #{id}
  </select>


  <!-- 전체 앨범 데이터 불러오기  -->
  <select id="getAllAlbums" resultMap="Album">
    SELECT * FROM album
    ORDER BY release_date DESC
    LIMIT #{index}, #{size}
  </select>


</mapper>
