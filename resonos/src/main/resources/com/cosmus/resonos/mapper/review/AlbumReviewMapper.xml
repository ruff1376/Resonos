<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cosmus.resonos.mapper.review.AlbumReviewMapper">

    <!-- ─────────────────────── AlbumReview → 도메인 매핑 -->
    <resultMap id="AlbumReview" type="com.cosmus.resonos.domain.review.AlbumReview">
        <id     property="id"        column="id"/>
        <result property="rating"    column="rating"/>
        <result property="content"   column="content"/>
        <result property="blinded"   column="blinded"/>
        <result property="likes"     column="likes"/>
        <result property="dislikes"  column="dislikes"/>
        <result property="createdAt" column="created_at"/>
        <result property="critic"    column="critic"/>
        <result property="userId"    column="user_id"/>
        <result property="albumId"   column="album_id"/>
        <result property="title"     column="title"/>
        <association property="reviewer" javaType="com.cosmus.resonos.domain.review.Reviewer">
            <id property="id" column="reviewer_id"/>
            <result property="nickname" column="reviewer_nickname"/>
            <result property="profileImage" column="reviewer_profile_image"/>
            <result property="pro" column="reviewer_is_pro"/>
        </association>
    </resultMap>

    <!-- ─────────────────────── AlbumScore → 집계 매핑 -->
    <resultMap id="AlbumScore" type="com.cosmus.resonos.domain.review.AlbumScore">
        <id property="albumId"         column="album_id"/>
        <result property="averageScore" column="avg_score"/>
        <result property="criticCount"  column="critic_count"/>
        <result property="userCount"    column="user_count"/>
    </resultMap>

    <!-- insert -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO album_review (
            rating, content, blinded, likes, dislikes, created_at, critic, user_id, album_id)
        VALUES (
            #{rating}, #{content}, #{blinded}, #{likes}, #{dislikes}, #{createdAt}, #{critic}, #{userId}, #{albumId})
    </insert>

    <!-- find by id -->
    <select id="findById" resultMap="AlbumReview">
        SELECT * FROM album_review WHERE id = #{id}
    </select>

    <!-- find reviews for album (blinded 제외) -->
    <select id="findByAlbumId" resultMap="AlbumReview">
        SELECT * FROM album_review
        WHERE album_id = #{albumId}
          AND blinded = 0
        ORDER BY created_at DESC
    </select>

    <select id="reviewWithReviewerByAlbumId" parameterType="string" resultMap="AlbumReview">
        SELECT
            ar.id,
            ar.rating,
            ar.content,
            ar.blinded,
            ar.created_at,
            ar.critic,
            ar.user_id,
            ar.album_id,
            u.id AS reviewer_id,
            u.nickname AS reviewer_nickname,
            u.profile_image AS reviewer_profile_image,
            u.is_pro AS reviewer_is_pro,
            (SELECT COUNT(*) FROM review_like WHERE review_id = ar.id AND review_type = 'ALBUM') AS likes,
            (SELECT COUNT(*) FROM review_report WHERE review_id = ar.id AND review_type = 'ALBUM') AS dislikes
        FROM album_review ar
        JOIN user u ON u.id = ar.user_id
        WHERE ar.album_id = #{albumId}

        ORDER BY ar.critic DESC, likes DESC, ar.created_at ASC
    </select>

    <select id="selectPagedReviewsWithReviewer"  resultMap="AlbumReview">
        SELECT
            ar.id,
            ar.rating,
            ar.content,
            ar.blinded,
            ar.created_at,
            ar.critic,
            ar.user_id,
            ar.album_id,
            u.id AS reviewer_id,
            u.nickname AS reviewer_nickname,
            u.profile_image AS reviewer_profile_image,
            u.is_pro AS reviewer_is_pro,
            (SELECT COUNT(*) FROM review_like WHERE review_id = ar.id AND review_type = 'ALBUM') AS likes,
            (SELECT COUNT(*) FROM review_report WHERE review_id = ar.id AND review_type = 'ALBUM') AS dislikes
        FROM album_review ar
        JOIN user u ON u.id = ar.user_id
        <where>
            <if test="albumId != null">
                ar.album_id = #{albumId}
            </if>
        </where>
        ORDER BY ar.critic DESC, likes DESC, ar.created_at ASC
        LIMIT #{size} OFFSET #{offset}
    </select>


    <select id="getLastestReview"
        resultMap="AlbumReview">
        SELECT
            ar.id,
            ar.rating,
            ar.content,
            ar.blinded,
            ar.created_at,
            ar.critic,
            ar.user_id,
            ar.album_id,
            u.id AS reviewer_id,
            u.nickname AS reviewer_nickname,
            u.profile_image AS reviewer_profile_image,
            u.is_pro AS reviewer_is_pro,
            (SELECT COUNT(*) FROM review_like WHERE review_id = ar.id AND review_type = 'ALBUM') AS likes,
            (SELECT COUNT(*) FROM review_report WHERE review_id = ar.id AND review_type = 'ALBUM') AS dislikes

        FROM album_review ar
        JOIN user u ON u.id = ar.user_id

        WHERE ar.album_id = #{albumId}
        AND ar.user_id = #{userId}
        AND ar.blinded = 0

        LIMIT 1
    </select>


    <!-- 마이페이지: 유저의 앨범 리뷰 -->
    <select id="reviewWithReviewerByUserId"  resultMap="AlbumReview">
        SELECT
            ar.id,
            ar.rating,
            ar.content,
            ar.blinded,
            ar.created_at,
            ar.critic,
            ar.user_id,
            ar.album_id,
            u.id AS reviewer_id,
            u.nickname AS reviewer_nickname,
            u.profile_image AS reviewer_profile_image,
            u.is_pro AS reviewer_is_pro,
            (SELECT COUNT(*) FROM review_like WHERE review_id = ar.id AND review_type = 'ALBUM') AS likes,
            (SELECT COUNT(*) FROM review_report WHERE review_id = ar.id AND review_type = 'ALBUM') AS dislikes,
            a.title
        FROM album_review ar
        JOIN user u ON u.id = ar.user_id
        JOIN album a ON ar.album_id = a.id
        WHERE ar.user_id = #{loginUserId}
        <if test="keyword != null and keyword != ''">
        AND (
            a.title LIKE CONCAT('%', #{keyword}, '%')
            OR ar.content LIKE CONCAT('%', #{keyword}, '%')
        )
        </if>
        ORDER BY
        <choose>
            <when test="keyword != null and keyword != ''">
                CASE
                WHEN a.title LIKE CONCAT(#{keyword}, '%') THEN 0
                WHEN a.title LIKE CONCAT('%', #{keyword}, '%') THEN 1
                WHEN ar.content LIKE CONCAT(#{keyword}, '%') THEN 2
                WHEN ar.content LIKE CONCAT('%', #{keyword}, '%') THEN 3
                ELSE 4
                END,
                ar.created_at DESC
            </when>
            <otherwise>
                ar.created_at DESC
            </otherwise>
        </choose>
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 마이페이지: 앨범 리뷰 수  -->
    <select id="countAlbumReview" resultType="int">
        SELECT COUNT(*)
        FROM album_review ar
        WHERE ar.user_id = #{loginUserId}
    </select>

    <!-- 마이페이지: 유저의 좋아요한 앨범 리뷰 -->
    <select id="likedReviewByUserId" resultMap="AlbumReview">
        SELECT
            ar.id,
            ar.rating,
            ar.content,
            ar.blinded,
            ar.created_at,
            ar.critic,
            ar.user_id,
            ar.album_id,
            u.id AS reviewer_id,
            u.nickname AS reviewer_nickname,
            u.profile_image AS reviewer_profile_image,
            u.is_pro AS reviewer_is_pro,
            (SELECT COUNT(*) FROM review_like WHERE review_id = ar.id AND review_type = 'ALBUM') AS likes,
            (SELECT COUNT(*) FROM review_report WHERE review_id = ar.id AND review_type = 'ALBUM') AS dislikes,
            a.title
        FROM review_like rl
        JOIN album_review ar ON ar.id = rl.review_id
        JOIN user u ON ar.user_id = u.id
        JOIN album a ON ar.album_id = a.id
        WHERE rl.user_id = #{loginUserId}
        AND rl.review_type = 'ALBUM'
        <if test="keyword != null and keyword != ''">
        AND (
            a.title LIKE CONCAT('%', #{keyword}, '%')
            OR ar.content LIKE CONCAT('%', #{keyword}, '%')
            OR u.nickname LIKE CONCAT('%', #{keyword}, '%')
        )
        </if>
        ORDER BY
        <choose>
            <when test="keyword != null and keyword != ''">
                CASE
                WHEN a.title LIKE CONCAT(#{keyword}, '%') THEN 0
                WHEN a.title LIKE CONCAT('%', #{keyword}, '%') THEN 1
                WHEN ar.content LIKE CONCAT(#{keyword}, '%') THEN 2
                WHEN ar.content LIKE CONCAT('%', #{keyword}, '%') THEN 3
                WHEN u.nickname LIKE CONCAT('%', #{keyword}, '%') THEN 4
                WHEN u.nickname LIKE CONCAT('%', #{keyword}, '%') THEN 5
                ELSE 6
                END,
                rl.created_at DESC
            </when>
            <otherwise>
                rl.created_at DESC
            </otherwise>
        </choose>
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 마이페이지: 좋아요 한 앨범 리뷰 수  -->
    <select id="countLikedAlbumReview" resultType="int">
        SELECT COUNT(*)
        FROM review_like rl
        WHERE rl.user_id = #{loginUserId}
        AND rl.review_type = 'ALBUM'
    </select>

    <!-- update blind status -->
    <update id="updateBlindStatus">
        UPDATE album_review SET blinded = #{blinded} WHERE id = #{id}
    </update>

    <!-- like / dislike -->
    <update id="incrementLikes">
        UPDATE album_review SET likes = likes + 1 WHERE id = #{id}
    </update>

    <update id="incrementDislikes">
        UPDATE album_review SET dislikes = dislikes + 1 WHERE id = #{id}
    </update>

    <!-- ───────── AlbumScore Aggregation -->
    <select id="findScoreByAlbumId" resultMap="AlbumScore">
        <![CDATA[
        SELECT album_id,
               ROUND(AVG(rating)) AS avg_score,
               SUM(CASE WHEN critic = 1 THEN 1 ELSE 0 END) AS critic_count,
               SUM(CASE WHEN critic = 0 THEN 1 ELSE 0 END) AS user_count
        FROM album_review
        WHERE album_id = #{albumId}
          AND blinded = 0
        GROUP BY album_id
        ]]>
    </select>

    <update id="update">
        UPDATE album_review
        SET rating = #{rating},
            content = #{content}
        WHERE id = #{id}
    </update>

    <delete id="delete">
        DELETE FROM album_review WHERE id = #{id}
    </delete>

    <!-- 중복 리뷰 방지 -->
    <select id="existsByUserAndAlbum" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM album_review
        WHERE user_id = #{userId}
          AND album_id = #{albumId}
    </select>

    <!-- 전체 리뷰 수 -->
    <select id="countByAlbumId" resultType="long">
        SELECT COUNT(*) FROM album_review
        WHERE album_id = #{albumId}
          AND blinded = 0
    </select>

    <!-- 전체 리뷰 수 -->
    <select id="countAll" resultType="long">
        SELECT COUNT(*) FROM album_review
    </select>

    <!-- 어드민 리뷰 관련  -->
    <resultMap id="ReviewReport" type="com.cosmus.resonos.domain.review.ReviewReport">
        <id property="id" column="id"/>
        <result property="reviewId" column="review_id"/>
        <result property="userId" column="user_id"/>
        <result property="reviewType" column="review_type"/>
        <result property="createdAt" column="created_at"/>
    </resultMap>
    <select id="findByReviewIdAndType" resultMap="ReviewReport">
        SELECT * FROM review_report
        WHERE review_id = #{reviewId}
          AND review_type = #{reviewType}
        ORDER BY id DESC
    </select>
    <select id="findAllByType" resultMap="ReviewReport">
        SELECT * FROM review_report
        WHERE review_type = #{reviewType}
        ORDER BY id DESC
    </select>
    <select id="countByType" resultType="long">
        SELECT COUNT(*) FROM review_report
        WHERE review_type = #{reviewType}
    </select>
    <select id="findAllReviewsWithReviewer" resultMap="AlbumReview">
    SELECT
        ar.id,
        ar.rating,
        ar.content,
        ar.blinded,
        ar.likes,
        ar.dislikes,
        ar.created_at,
        ar.critic,
        ar.user_id,
        ar.album_id,
        u.id AS reviewer_id,
        u.nickname AS reviewer_nickname,
        u.profile_image AS reviewer_profile_image,
        u.is_pro AS reviewer_is_pro
    FROM album_review ar
    JOIN user u ON u.id = ar.user_id
    ORDER BY ar.id DESC
    </select>

    <!-- 찾는 리뷰가 몇 번째인지 -->
    <select id="findMyReview" resultType="int">
        SELECT COUNT(*)
        FROM album_review ar
        JOIN album_review target ON target.id = #{reviewId}
        WHERE ar.album_id = target.album_id
        AND (
            (
            (SELECT COUNT(*) FROM review_like WHERE review_id = ar.id AND review_type = 'ALBUM')
            >
            (SELECT COUNT(*) FROM review_like WHERE review_id = target.id AND review_type = 'ALBUM')
            )
            OR (
            (SELECT COUNT(*) FROM review_like WHERE review_id = ar.id AND review_type = 'ALBUM')
            =
            (SELECT COUNT(*) FROM review_like WHERE review_id = target.id AND review_type = 'ALBUM')
            AND ar.created_at &lt; target.created_at
            )
        )
    </select>


</mapper>
